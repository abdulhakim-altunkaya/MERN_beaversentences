1) GITHUB: create a github repo and clone it to your computer and open project folder on CMD

2) ROOT: 
npm init -y
npm install express dotenv mongoose mongodb
3) ROOT: open package.json and update these parts below like this:
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "client": "cd client && npm start",
    "install-client": "cd client && npm install",
    "heroku-postbuild": "cd client && npm install && npm run build",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "engines": {
    "node": ">=14.20.1"
  }

specifiying "engines" will prevent a Render.com Error. Other settings are common.

4) ROOT: Create a .gitignore file and add these:
node_modules
"node_modules"
.env

5) ROOT: create a client folder and go into it on CMD
6) CLIENT: 
npx create-react-app .
npm install "react-router-dom"
npm install axios
7) CLIENT: 
make a cleanup of react files, 
then check if your react project works: npm start
Then check if client .gitignore contains anything "build", if it contains, remove it.
8) CLIENT: Create a simple routing on App.js:

import React from 'react';
import { BrowserRouter as Router, Route, Link, Routes } from 'react-router-dom';
import Test from './components/Test';
import Home from './components/Home';
function App() {
    return (
        <Router>
            <div>
                <nav>
                    <ul>
                        <li>
                            <Link to="/">Home</Link>
                        </li>
                        <li>
                            <Link to="/test">Test</Link>
                        </li>
                    </ul>
                </nav>
                
                <Routes>
                    <Route path="/test" element={ <Test /> } />
                    <Route path="/" element={ <Home /> } />
                </Routes>
            </div>
        </Router>
    );
}
export default App;

9) CLIENT: Create a simple Test.js file for testing Node-React connection:

import React, { useEffect, useState } from 'react';
function Test() {
    const [data, setData] = useState(null);
    useEffect(() => {
        fetch('/api')
        .then(res => {
            console.log(res);
            return res.json();
         })
         .then(data => setData(data.message))
         .catch(err => console.error("Error fetching data: ", err.message));
    }, []);
    return (
        <div>
            <h2>Test Component</h2>
            {data ? <p>{data}</p> : <p>Loading...</p>}
        </div>
    );
}
export default Test;

Also create Home.js component to save data to Mongodb:

import React, { useState } from 'react';
import axios from 'axios';
function Home() {
    const [inputData, setInputData] = useState('');
    const sendDataToServer = async () => {
        try {
            const response = await axios.post('/write', { content: inputData });
            console.log(response.data);
            alert("Data saved to the MongoDB")
            setInputData(''); // Clear the input after successful save
        } catch (error) {
            console.error('There was an error sending data', error);
        }
    };
    return (
        <div>
            <input 
                type="text" 
                value={inputData}
                onChange={(e) => setInputData(e.target.value)}
                placeholder="Enter data..."
            />
            <button onClick={sendDataToServer}>Save to MongoDB</button>
        </div>
    );
}
export default Home;


10) ROOT: create server.js file:
const express = require('express');
const path = require('path');
const mongoose = require("mongoose");

const DataModel = require("./DataModel");
const connectDB = require("./Database");
connectDB();

const app = express();
// Serve static files from the React app
app.use(express.static(path.join(__dirname, 'client/build')));
// Middleware to parse POST body data. This is needed for "post" requests below
app.use(express.json({ extended: false }));


// API route
app.get('/anypath', (req, res) => {
    res.json({ message: "Hello from the server!" });
});

// Handle any requests that don't match the above
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'client/build', 'index.html'));
});

app.post("/write", async (req, res) => {
  try {
    const {content} = req.body;
    const newData = new DataModel({ content });
    await newData.save();
    res.json({message: "Data saved successfully / Данные сохранены"})
  } catch (error) {
    console.log("Ошибка сервера при сохранении данных", error.message);
    res.status(500).send("Server error while saving data/Ошибка сервера при сохранении данных")
  }
})

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});


11) ROOT: Create Database.js and put inside:
//Database.js
require("dotenv").config();
const mongoose = require("mongoose");
const uri = process.env.SERVER_MONGODB_URI;
const connectDB = async () => {
    try {
       await mongoose.connect(uri);
       console.log("Успех, подключение к MongoDB / Success, connected to MongoDB") 
    } catch (error) {
        console.log("Ошибка подключения:", error.message);
    }
}
module.exports = connectDB;

12) ROOT: Create DataModel.js and put inside:
// DataModel.js
const mongoose = require("mongoose");
const DataSchema = new mongoose.Schema({
    content: {
        type: String,
        required: true
    }
});
module.exports = mongoose.model("DataModel", DataSchema);

13) MONGODB WEBSITE:
Go to your profile page 
Click on "+New Project"
Name your project
No need to add any members
Click on "Create Deployment"
Choose free option
Choose a region close to you and click on "create"
For connection authentication:
-Click on "Username and Passwor"
-Enter a username and password
-Choose "Cloud Environment"
-Configure "IP Access List"
-Enter this for IP Address: "0.0.0.0/0" and anything in "description" field
-Click on "Finish and Close"
Then on cluster page, click on "Connect"
Click on "Drivers"
Copy your raw connection string and paste it to dotenv file like below (for example my password is: "XXaaBB1212"):
-mongodb+srv://leonidas:<password>@cluster0.fdkdzmd.mongodb.net/?retryWrites=true&w=majority (RAW STRING)
-mongodb+srv://leonidas:XXaaBB1212@cluster0.fdkdzmd.mongodb.net/?retryWrites=true&w=majority (STRING WITH PASSWORD)

14) ROOT: Create .env file and put inside:
SERVER_MONGODB_URI = "mongodb+srv://leonidas:XXaaBB1212@cluster0.fdkdzmd.mongodb.net/?retryWrites=true&w=majority"

15) Later when you upload your project to Render.com, dont forget to add this below as an environment variable
SERVER_MONGODB_URI = "mongodb+srv://leonidas:XXaaBB1212@cluster0.fdkdzmd.mongodb.net/?retryWrites=true&w=majority"